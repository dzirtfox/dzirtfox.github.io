Cелекторы jQuery используются для выбора элементов на странице, чтобы затем вызвать методы jQuery для манипулирования ими.

Основные селекторы
 
Необходимо отыскать все элементы веб-страницы, но только в контексте body, ис-ключив, таким образом, все прочие элементы.

<table class="shaded" style="margin-bottom: 20px;" border="0">
<tbody>
<tr>
<th>Селектор</th><th>Описание</th><th>Пример</th>
</tr>
<tr>
<td>Все</td>
<td>Выбирает все элементы на странице, включая <code>head</code>, <code>body</code> и так далее.</td>
<td><code>$("*")</code></td>
</tr>
<tr>
<td>Элемент</td>
<td>Выбирает все элементы с заданным тегом.</td>
<td><code>$("p")</code><br><code>$("div")</code></td>
</tr>
<tr>
<td>Класс</td>
<td>Выбирает все элементы с заданным именем класса.</td>
<td><code>$(".myClass")</code><br><code>$("p.myClass")</code></td>
</tr>
<tr>
<td>ID</td>
<td>Выбирает один элемент с заданным атрибутом <code>id</code>.</td>
<td><code>$("#myID")</code><br><code>$("p.#myID")</code></td>
</tr>
</tbody>
</table>

Выбор элементов по атрибуту

иногда нужно выбрать определенный элемент, у которого нет класса или ID, и нет возможности просто добавить класс или ID к данному элементу в разметке. Такая ситуация может сложиться при использовании CMS с фиксированным шаблоном HTML или при работе с контентом, созданным пользователем.

<table class="shaded" style="margin-bottom: 20px;" border="0">
<tbody>
<tr>
<th>Селектор</th><th>Описание</th><th>Пример</th>
</tr>
<tr>
<td>Атрибут</td>
<td>Выбирает элемент(ы), которые содержат определенный атрибут вне зависимости от значения атрибута.</td>
<td><code>$("div[attributeName]")</code></td>
</tr>
<tr>
<td>Атрибут равен</td>
<td>Выбирает элемент(ы), которые содержат заданный атрибут с заданным значением.</td>
<td><code>$("div[attributeName='value']")</code></td>
</tr>
<tr>
<td>Атрибут не равен</td>
<td>Выбирает элемент(ы), которые не содержат заданного атрибута или сожержат заданный атрибут, но его значение не соответствует заданному.</td>
<td><code>$("div[attributeName!='value']")</code></td>
</tr>
<tr>
<td>Атрибут начинается с</td>
<td>Выбирает элемент(ы), которые содержат заданный атрибут, у которого значение начинается с заданной строки.</td>
<td><code>$("div[attributeName^='value']")</code></td>
</tr>
<tr>
<td>Атрибут заканчивается <br></td>
<td>Выбирает элемент(ы), которые содержат атрибут, у которого значение заканчивается заданной строкой.</td>
<td><code>$("div[attributeName$='value']")</code></td>
</tr>
<tr>
<td>Атрибут содержит</td>
<td>Выбирает элемент(ы), который содержит атрибут, у которого значение содержит заданную строку.</td>
<td><code>$("div[attributeName*='value']")</code></td>
</tr>
<tr>
<td>Атрибут содержит слово</td>
<td>Выбирает элемент(ы), который содержит атрибут, у которого значение содержит заданное слово. "Слово" - это последовательность символов без пробелов.</td>
<td><code>$("div[attributeName~='value']")</code></td>
</tr>
<tr>
<td>Атрибут содержит префикс</td>
<td>Выбирает элемент(ы), который содержит атрибут, у которого значение либо равно заданной строке, либо начинается с заданной строки с последующим дефисом.</td>
<td><code>$("div[attributeName|='value']")</code></td>
</tr>
</tbody>
</table>

Выбор элементов по содержанию

Если нет возможности сузить область выбора по основным селекторам и по атрибутам, то можно "покопаться" в содержании элемента для определения, подходит он для выбора или нет. jQuery имеет 4 селектора для данного назначения:

<table class="shaded" style="margin-bottom: 20px;" border="0">
<tbody>
<tr>
<th>Селектор</th><th>Описание</th><th>Пример</th>
</tr>
<tr>
<td><code>:contains()</code></td>
<td>Выбирает элемент(ы), которые содержат заданный текст. Текст может быть в самом элементе, так и в любом элементе внутри в выбранного элемента. Примечание:&nbsp; <code>:contains()</code> чувствительно к регистру - <code>"Hello"</code> не соответствует <code>"hello"</code>.</td>
<td><code>// Выбираем все div, которые содержат "myText":<br>$("div:contains('myText')")</code></td>
</tr>
<tr>
<td><code>:has()</code></td>
<td>Выбирает элемент(ы), которые содержат 1 или более элементов, соответствующих заданной строке. Селектор просматривает на соответствие все элементы внутри заданного элемента.</td>
<td><code>// Выбираем все div, которые содержат параграфы:<br>$("div:has(p)")</code></td>
</tr>
<tr>
<td><code>:parent</code></td>
<td>Выбирает элемент(ы), которые содержат другие элементы или текстовые узлы.</td>
<td><code>// Выбираем все div, которые содержат что-нибудь:<br>$("div:parent")</code></td>
</tr>
<tr>
<td><code>:empty</code></td>
<td>Выбирает элемент(ы), которые не содержат других элементов или текстовых узлов.</td>
<td><code>// Выбираем все div, которые не содержат ничего:<br>$("div:empty")</code></td>
</tr>
</tbody>
</table>

Выбор элементов по иерархии

Другой способ выбрать элементы в jQuery - это рассмотреть, как они соотносятся друг к другу на странице. Вероятно, вы знаете много таких селекторов по работе с  CSS:

<table class="shaded" style="margin-bottom: 20px;" border="0">
<tbody>
<tr>
<th>Селектор</th><th>Описание</th><th>Пример</th>
</tr>
<tr>
<td>Ребенок</td>
<td>Выбирает элемент(ы), которые являются ребенком (прямым потомком) заданного предка(ов).</td>
<td><code>// Выбираем все элементы списка с классом "highlight", которые являются ребёнком для списка с ID "nav":<br>$("ul#nav &gt; li.highlight")</code></td>
</tr>
<tr>
<td>Потомок</td>
<td>Выбирает элемент(ы), которые являются потомками (детьми, внуками и так далее) заданного предка(ов). Это более общая форма селектора Ребенок.</td>
<td><code>// Выбираем все ссылки внутри списка с ID "nav":<br>$("ul#nav a")</code></td>
</tr>
<tr>
<td>Следующий соседний элемент<br></td>
<td>Выбирает элемент(ы), который следует непосредственно за заданным элементом, где оба элемента имеют одного и того же родителя.</td>
<td><code>// Выбираем все параграфы, которые следуют непосредственно за&nbsp; заголовком H1:<br>$("h1 + p")</code></td>
</tr>
<tr>
<td>Следующий сестринский элемент<br></td>
<td>Выбирает элемент(ы), который следует за другим элементом, где оба элемента являются потомками одного родителя. Это более обобщенная версия селектора следующий соседний элемент.</td>
<td><code>// Выбираем все ячейки таблицы после ячейки, которая содержит слово "Hello":<br>$("td:contains('hello') ~ td")</code></td>
</tr>
<tr>
<td>Первый ребенок</td>
<td>Выбирает элемент(ы), который является первым ребенком его родителя.</td>
<td><code>// Выбираем первые пункты во всех списках на странице:<br>$("li:first-child")</code></td>
</tr>
<tr>
<td>Последний ребенок</td>
<td>Выбирает элемент(ы), который является последним ребенком его родителя.</td>
<td><code>// Выбираем последние пункты во всех списках на странице:<br>$("li:last-child")</code></td>
</tr>
<tr>
<td>N-й ребенок</td>
<td>Выбирает элемент(ы), который является <em>n-м</em> ребенком его родителя <em>(смотри примечание ниже)</em>.</td>
<td><code>// Выбираем третьи пункты во всех списках на странице:<br>$("li:nth-child(3)")</code></td>
</tr>
<tr>
<td>Только ребенок</td>
<td>Выбирает элемент(ы), которые являются&nbsp; ребенком родителей, у которых есть только дети.</td>
<td><code>// Выбираем только элементы в списках с одним пунктом:<br>$("li:only-child")</code></td>
</tr>
</tbody>
</table>

Выбор полей формы

Элементы формы имеют некоторые специфические свойства, которые вынуждают использовать некоторые трюки для их выбора. Например, чекбоксы, наряду со многими  другими типами полей, являются элементами input. Таким образом,, чтобы выбрать чекбоксы в форме нужно использовать $("input[type='checkbox']").

Аналогично, идентификация выбранных элементов в списке select или отмеченных чекбоксов в форме может быть утомительным занятием./

К счастью, jQuery обеспечивает несколько специфических для форм селекторов, которые облегчают жизнь:

<table class="shaded" style="margin-bottom: 20px;" border="0">
<tbody>
<tr>
<th>Селектор</th><th>Описание</th><th>Пример</th>
</tr>
<tr>
<td><code>:button</code></td>
<td>Выбирает все кнопки формы.</td>
<td><code>$("input:button")</code></td>
</tr>
<tr>
<td><code>:checkbox</code></td>
<td>Выбирает все чекбоксы.</td>
<td><code>$("input:checkbox")</code></td>
</tr>
<tr>
<td><code>:file</code></td>
<td>Выбирает все поля загрузки фала.</td>
<td><code>$("input:file")</code></td>
</tr>
<tr>
<td><code>:enabled</code></td>
<td>Выбирает все Доступные поля формы.</td>
<td><code>$("input:enabled")</code></td>
</tr>
</tbody>
</table>

Выбор элементов по их положению

Иногда нужно выбрать элемент, про который известно, что он расположен в наборе ранее выбранных элементов. Например, нужно выделить первый параграф, который имеет класс "myClass". Для усложнения примера допустим, что нужно выбрать все пункты в списке, который имеет класс "myClass", а затем выбрать 5-й пункт из получившегося набора.

jQuery имеет семь селекторов, которые можно использовать для ограничения области поиска на основе позиции элемента:

<table class="shaded" style="margin-bottom: 20px;" border="0">
<tbody>
<tr>
<th>Селектор</th><th>Описание</th><th>Примеры<br> </th>
</tr>
<tr>
<td><code>:first</code></td>
<td>Выбирает первый элемент в наборе отобранных элементов.</td>
<td><code>// Выбираем первый параграф, который имеет класс "myClass":<br>$("p.myClass:first")</code></td>
</tr>
<tr>
<td><code>:last</code></td>
<td>Выбирает последний элемент в наборе отобранных элементов.</td>
<td><code>// Выбираем последний параграф, который имеет класс "myClass":<br>$("p.myClass:last")</code></td>
</tr>
<tr>
<td><code>:eq()</code></td>
<td>Выбирает единственный элемент в наборе отобранных элементов. Выбор элемента осуществляется по последовательному номеру индекса (<code>0</code> = первый элемент, <code>1</code> = второй и так далее).</td>
<td><code>// Выбираем з-й параграф, который имеет класс "myClass":<br>$("p.myClass:eq(2)")</code></td>
</tr>
<tr>
<td><code>:lt()</code></td>
<td>Выбирает элементы в наборе отобранных элементов, которые расположены перед элементом с заданным индексом. Например, если задан индекс <code>2</code> (то есть 3-й элемент), то будут выбраны первые 2 элемента (с индексами 0 и 1).</td>
<td><code>// /Выбираем первые 2 параграфа, которые имеют класс "myClass":<br>$("p.myClass:lt(2)")</code></td>
</tr>
<tr>
<td><code>:gt()</code></td>
<td>Выбираем элементы в наборе отобранных элементов, которые расположены после элемента с заданным индексом. Например, если задан индекс 2 (то есть 3-й элемент), то будут выбраны все элементы после третьего.</td>
<td><code>// Выбираем все параграфы, которые имеют класс "myClass", за исключением первых трех:<br>$("p.myClass:gt(2)")</code></td>
</tr>
<tr>
<td><code>:even</code></td>
<td>Выбирает все элементы с четными индексами в наборе отобранных элементов. Заметьте, что индексы начинаются с 0, таким образом в действительности отбираются 1-й, 3-й и так далее элементы.</td>
<td><code>// Выбираем 1й, 3й, 5й, и так далее параграфы, которые имеют класс "myClass":<br>$("p.myClass:even")</code></td>
</tr>
<tr>
<td><code>:odd</code></td>
<td>Выбирает все элементы с нечетными индексами в наборе уже отобранных элементов. Заметьте, что индексы начинаются с 0, таким образом в действительности отбираются 2-й, 4-й и так далее элементы</td>
<td><code>// </code><code>Выбираем 2й, 4й, 6й, и так далее параграфы, которые имеют класс </code><code>"myClass":<br>$("p.myClass:odd")</code></td>
</tr>
</tbody>
</table>

Атрибуты элементов

Возможность управлять значениями атрибутов элементов объектной модели доку-мента позволяет изменять визуальное представление этих элементов, заменять зна-чения элементов форм программным способом, управлять их состоянием и т. п.

Варианты работы функции attr() в зависимости от переданных ей параметров:
<table>
<th>Описание</th><th>Параметры</th>
<tr><td>
attr ( name ) - получает значение заданного атрибута соответствующего элемента набора jQuery, либо первого элемента в наборе jQuery (если их несколько). Возвращает значение undefined, если у элемента указанный атрибут отсутствует или в наборе нет элементов.
</td>
<td>name – (строка) Имя атрибута, значение которого необходимо получить.</td>
</tr>
<tr><td>
attr ( name, value ) - присваивает атрибуту name значение value для всех элементов набора jQuery.
</td>
<td>name – (строка) Имя атрибута, которому необходимо присвоить значение.<br />
value – (строка | массив) Значение присваиваемое атрибуту или выражение JavaScript, вычисленное значение которого (возможно даже массив) присваивается атрибуту.</td>
</tr>
<tr><td>
attr ( object ) - устанавливает значение атрибута...
</td>
<td>object – (объект) Объект, свойства которого становятся значениями атрибутов всех элементов в наборе jQuery. Если значением какого-либо свойства объекта является функция, то данная функция вызывается индивидуально для каждого отдельного элемента в наборе, а возвращаемое ею значение становится значением атрибута.</td>
</tr>
<tr><td>
attr ( name, function() ) - устанавливает значение атрибутаполученные в виде пар ключ:'значение' объекта object 
</td>
<td>name – (строка) Имя атрибута, которому необходимо присвоить значение.<br />
function( [index, attr] ) – (функция) Ссылка на функцию, которая вызывается индивидуально для каждого отдельного элемента в наборе, а возвращаемое ею значение становится значением атрибута. С первым параметром index ей передается индекс текущего элемента в наборе (начиная с 0), а втором аргументе attr - старое значение атрибута. Внутри функции контекст this ссылается на текущий элемент.</td>
</tr>

Обработчики событий jQuery

Общий вид определения обработчиков jQuery:

$(селектор).обработчик_события(function(){код_обработчика_события});

Объект event

Объект event содержит информацию о произошедшем событии.

Объект event создается для каждого произошедшего события, но для того, чтобы иметь возможность обращаться к его свойствам и методам его необходимо явно передать в обработчик события.

$(селектор).событие(function(event){код_обработчика_события});

Метод jQuery one() позволяет создавать обработчики, которые могут быть вызваны лишь один раз.

$(document).ready(function(){

   $("#but1").one("click",function(){alert("Вы нажали на кнопку с id=but1")});

});

Метод jQuery toggle() позволяет переключаться между различными обработчиками событий по щелчку мыши.

$(document).ready(function(){

  $(document).ready(function(){

   $("#but1").click(function(){
      $("#par1").css("color","black");
      $("#par1").css("font-size","1em");
   });
   $("#par1").toggle(function(){
      $("#par1").css("color","green");
      $("#par1").css("font-size","10px");},function(){
      $("#par1").css("color","red");
      $("#par1").css("font-size","20px");},function(){
      $("#par1").css("color","blue");
      $("#par1").css("font-size","30px");},function(){
      $("#par1").css("color","black");
      $("#par1").css("font-size","1em");
   });

});
